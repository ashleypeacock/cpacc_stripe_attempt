/*
  # Initial Database Schema
  
  Creates core tables and security policies if they don't already exist.
  Uses IF NOT EXISTS to prevent errors on repeated runs.
*/

-- Create quiz_progress table
CREATE TABLE IF NOT EXISTS quiz_progress (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id),
  questions_completed INTEGER DEFAULT 0,
  correct_answers INTEGER DEFAULT 0,
  total_attempts INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Create question_attempts table
CREATE TABLE IF NOT EXISTS question_attempts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  question_id INTEGER NOT NULL,
  correct BOOLEAN NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Create login_attempts table
CREATE TABLE IF NOT EXISTS login_attempts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT NOT NULL,
  ip_address TEXT,
  attempted_at TIMESTAMPTZ DEFAULT now(),
  success BOOLEAN DEFAULT false
);

-- Create security_events table
CREATE TABLE IF NOT EXISTS security_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  event_type TEXT NOT NULL,
  description TEXT,
  ip_address TEXT,
  user_agent TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Create error_logs table
CREATE TABLE IF NOT EXISTS error_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  error_code TEXT,
  error_message TEXT,
  context JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS on all tables
DO $$ 
BEGIN
  ALTER TABLE quiz_progress ENABLE ROW LEVEL SECURITY;
  ALTER TABLE question_attempts ENABLE ROW LEVEL SECURITY;
  ALTER TABLE login_attempts ENABLE ROW LEVEL SECURITY;
  ALTER TABLE security_events ENABLE ROW LEVEL SECURITY;
  ALTER TABLE error_logs ENABLE ROW LEVEL SECURITY;
EXCEPTION 
  WHEN OTHERS THEN NULL;
END $$;

-- Create RLS policies (dropping existing ones first to avoid conflicts)
DROP POLICY IF EXISTS "Users can read their own progress" ON quiz_progress;
DROP POLICY IF EXISTS "Users can update their own progress" ON quiz_progress;
DROP POLICY IF EXISTS "Users can insert their own progress" ON quiz_progress;
DROP POLICY IF EXISTS "Users can read their own attempts" ON question_attempts;
DROP POLICY IF EXISTS "Users can insert their own attempts" ON question_attempts;
DROP POLICY IF EXISTS "Users can view their own security events" ON security_events;
DROP POLICY IF EXISTS "Only admins can view error logs" ON error_logs;

CREATE POLICY "Users can read their own progress"
  ON quiz_progress FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own progress"
  ON quiz_progress FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can insert their own progress"
  ON quiz_progress FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can read their own attempts"
  ON question_attempts FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own attempts"
  ON question_attempts FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own security events"
  ON security_events FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Only admins can view error logs"
  ON error_logs FOR SELECT
  USING (auth.jwt() ->> 'role' = 'service_role');